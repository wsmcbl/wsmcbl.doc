@startuml
left to right direction

actor Cashier

boundary CollectTariffView
boundary StudentsView

control CollectTariffController
control CreateProfileStudentController
control PrintDocumentsController

entity StudentEntity
entity StudentEntites
entity TransactionEntity
entity CashierEntity




'--- Actor relations ---
Cashier --> CollectTariffView
note on link
    update()
    collectTariff(list<>)
    collectTariff(tariff)
    applydDiscount()
    applydArreas(arreas)
    saveCollection()
    printReceitps()
    isStudentInBlacklist()
    cancel()
    calculateTotalTariff()
end note
Cashier --> StudentsView
note on link
    createStudent()
    searchStudent()
end note

'--- Views relations ----
CollectTariffView --> CollectTariffController
note on link
    getStudentProfile()
    applyDiscount()
    createTransaction()
    saveTransaction(Transaction)
    printTransaction()
    applyArreas()
    printStateAccount()

    computeChange(float Amount)
    isPaymentDollars?()
    getDolarRate()
    isArreas?()
end note
StudentsView --> CollectTariffController
note on link
    getStudentList()
    openStudent(id = "")
end note
StudentsView --> CreateProfileStudentController
note on link
    createStuden()
end note


'--- Controllers relations --- 
CollectTariffController --> StudentEntites
note on link
    getStudent(id = "")
    getStudentList()
end note

CollectTariffController --> TransactionEntity
note on link
    Transaction<<Constuct>>(studentId, cashierId)
    setTarif(List<Tariff>)
    calculateDiscount(List<Discount>)
end note

CollectTariffController -left-> PrintDocumentsController : printTransaction(Transaction)
CreateProfileStudentController --> StudentEntites : createStudent()
PrintDocumentsController --> TransactionEntity : getData()


'--- Entity relations --- 
TransactionEntity --> StudentEntity : getStudentId()
TransactionEntity --> CashierEntity : getCashierId()
@enduml